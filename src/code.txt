===== ExpensePage.java =====
package pages;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class ExpensePage {
    private WebDriver driver;
    private WebDriverWait wait;

    @FindBy(id = "menu_expenses")
    private WebElement expensesMenu;

    @FindBy(id = "date")
    private WebElement dateField;

    @FindBy(id = "category")
    private WebElement categoryDropdown;

    @FindBy(id = "currency")
    private WebElement currencyField;

    @FindBy(id = "amount")
    private WebElement amountField;

    @FindBy(id = "description")
    private WebElement descriptionField;

    @FindBy(id = "upload")
    private WebElement uploadButton;

    @FindBy(id = "saveDraft")
    private WebElement saveDraftButton;

    @FindBy(css = "#errorMessages")
    private WebElement errorMessages;

    public ExpensePage(WebDriver driver) {
        this.driver = driver;
        this.wait = new WebDriverWait(driver, 10);
        PageFactory.initElements(driver, this);
    }

    public void accessExpenses() {
        wait.until(ExpectedConditions.elementToBeClickable(expensesMenu)).click();
    }

    public void fillMandatoryFields(String date, String category, String currency, String amount, String description) {
        dateField.sendKeys(date);
        categoryDropdown.sendKeys(category);
        currencyField.clear();
        currencyField.sendKeys(currency);
        amountField.sendKeys(amount);
        descriptionField.sendKeys(description);
    }

    public void uploadDocument(String filePath) {
        uploadButton.sendKeys(filePath);
    }

    public void clickSaveAsDraft() {
        saveDraftButton.click();
    }

    public String getErrorMessages() {
        return errorMessages.getText();
    }
}


===== ExpenseStepDefinitions.java =====
package stepDefinitions;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.When;
import io.cucumber.java.en.Then;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import io.github.bonigarcia.wdm.WebDriverManager;
import pages.ExpensePage;
import static org.junit.Assert.*;

public class ExpenseStepDefinitions {
    private WebDriver driver;
    private ExpensePage expensePage;

    @Given("I am logged in as an employee")
    public void login() {
        WebDriverManager.chromedriver().setup();
        driver = new ChromeDriver();
        driver.get("http://example.com/login");
        // Add login functionality here
    }

    @When("I access the Expenses module from the left panel menu")
    public void accessExpensesModule() {
        expensePage = new ExpensePage(driver);
        expensePage.accessExpenses();
    }

    @When("I fill in the mandatory fields with valid data")
    public void fillValidData(io.cucumber.datatable.DataTable dataTable) {
        var data = dataTable.asLists(String.class);
        expensePage.fillMandatoryFields(data.get(1).get(0), data.get(1).get(1), data.get(1).get(2), data.get(1).get(3), data.get(1).get(4));
    }

    @When("I upload a valid document")
    public void uploadValidDocument() {
        expensePage.uploadDocument("path/to/document.pdf");
    }

    @When("I click on Save as Draft")
    public void clickSaveAsDraft() {
        expensePage.clickSaveAsDraft();
    }

    @Then("the expense record should be saved with a unique Claim-ID")
    public void verifyClaimID() {
        // Implement verification logic for Claim-ID
    }

    @Then("I should see inline error messages for the invalid fields")
    public void verifyErrorMessages() {
        String errors = expensePage.getErrorMessages();
        assertTrue(errors.contains("error message")); // replace with actual error message
    }

    // Additional step definitions for edit, delete, submit, and pagination scenarios...
}


===== TestRunner.java =====
package runners;

import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;
import org.junit.runner.RunWith;

@RunWith(Cucumber.class)
@CucumberOptions(features = "src/test/resources/features", glue = "stepDefinitions")
public class TestRunner {
}


===== BaseTest.java =====
package tests;

import org.junit.After;
import org.junit.Before;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import io.github.bonigarcia.wdm.WebDriverManager;

public class BaseTest {
    protected WebDriver driver;

    @Before
    public void setup() {
        WebDriverManager.chromedriver().setup();
        driver = new ChromeDriver();
        driver.manage().window().maximize();
    }

    @After
    public void teardown() {
        if (driver != null) {
            driver.quit();
        }
    }
}


===== CrossBrowserTest.java =====
package tests;

import org.junit.Test;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import io.github.bonigarcia.wdm.WebDriverManager;

public class CrossBrowserTest {
    @Test
    public void testExpenseModuleInDifferentBrowsers() {
        String[] browsers = {"chrome", "firefox"};
        for (String browser : browsers) {
            WebDriver driver;
            if (browser.equals("chrome")) {
                WebDriverManager.chromedriver().setup();
                driver = new ChromeDriver();
            } else {
                WebDriverManager.firefoxdriver().setup();
                driver = new FirefoxDriver();
            }
            driver.get("http://example.com");
            // Add test steps here
            driver.quit();
        }
    }
}

